#!/bin/bash

# Put this in /usr/local/bin or ~/bin, and run "unspadify install" to set up.
# Or "unspadify install verbose" for debugging.

PLIST=$HOME/Library/LaunchAgents/unspadify.plist

function _usage() {
  echo "Usage: $0 [install|uninstall|run] <verbose>"
  exit 1
}

function _uninstall() {
  echo "Unloading and removing file"
  launchctl unload $PLIST
  mv -f -v $PLIST /tmp
}

function _install() {
  [ -f "$PLIST" ] && _uninstall
  echo "Installing $PLIST and loading"
  cat > $PLIST <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>unspadify</string>
    <key>ProgramArguments</key>
    <array>
$(
  for ARG in $0 run $*
  do echo "        <string>$ARG</string>"
  done
)
    </array>
    <key>WatchPaths</key>
    <array>
$(
  find "$HOME/Library/Application Support/Spotify/Users" -name ad-state-storage.bnk | \
  while read ADFILE
  do echo "        <string>$ADFILE</string>"
  done
)
    </array>
</dict>
</plist>
EOF
  launchctl load $PLIST
  echo 'Hit "OK" when prompted for permission'
}

function _tell_app() {
  osascript -e "tell application \"Spotify\"
    $1
  end tell"
}

function _get_track() {
  _tell_app "set c to the current track
    set x to the $1 of c as text"
}

function _mute() {
  osascript -e "set volume output muted $1"
}

function _run() {
  [ "$1" = "verbose" ] && echo "$(date): checking player state" >> /tmp/unspadify.log
  if _tell_app 'player state' | grep -q 'playing'
  then
    IS_MUTED=$(osascript -e 'output muted of (get volume settings)')
    # the files change like 3 seconds before the switch, do multiple checks
    for ATTEMPT in $(seq 12)
    do
      if _get_track 'id' | grep -q ':ad:'
      then IS_AD='true'
      else IS_AD='false'
      fi
      if [ "$IS_AD" != "$IS_MUTED" ]
      then
        [ "$1" = "verbose" ] && echo "muting $IS_AD on cycle $ATTEMPT" >> /tmp/unspadify.log
        _mute $IS_AD
        break # end the for loop
      fi
      sleep 0.5
    done
  fi
}

ACTION=$1
shift
case "$ACTION" in
  i*) _install $* ;;
  u*) _uninstall ;;
  r*) _run $* ;;
  *)  _usage ;;
esac

